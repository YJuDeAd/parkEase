esphome:
  name: smart-parking
  friendly_name: Smart Parking

esp8266:
  board: esp01_1m

# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret parkEase_key

ota:
  password: !secret parkEase_ota

wifi:
  ssid: !secret temp_ssid
  password: !secret temp_password

  manual_ip:
    static_ip: !secret parkEase_ip
    gateway: !secret gateway
    subnet: 255.255.255.0 

  ap:
    ssid: "Smart-Parking Fallback Hotspot"
    password: !secret parkEase_hotspot

captive_portal:

# Web UI
web_server:
  port: 80
  version: 2
  auth:
    username: "admin"
    password: "admin"

# ==============================
# GLOBALS
# ==============================
globals:
  - id: parking_slots
    type: int
    restore_value: yes
    initial_value: "4"
  - id: Entry_trigger
    type: int
    restore_value: yes
    initial_value: "0"
  - id: Exit_trigger
    type: int
    restore_value: yes
    initial_value: "0"
  - id: error
    type: int
    restore_value: yes
    initial_value: "0"
  - id: total_cars_entered
    type: int
    restore_value: yes
    initial_value: "0"
  - id: total_cars_left
    type: int
    restore_value: yes
    initial_value: "0"
  - id: slot_pattern
    type: std::string
    restore_value: no
    initial_value: '"0000"'   # 4 slots empty at startup

# ==============================
# MQTT CONFIG
# ==============================
mqtt:
  broker: 10.20.51.48
  on_message:
    - topic: parkease/slots
      then:
        - lambda: |-
            id(slot_pattern) = x.c_str();
            ESP_LOGI("main", "Slot pattern updated to: %s", id(slot_pattern).c_str());
            id(oled_display).update();

# ==============================
# TEXT SENSORS
# ==============================
text_sensor:
  - platform: template
    name: "1) Parking Slots"
    lambda: "return to_string(id(parking_slots));"
    update_interval: 30s

  - platform: template
    name: "2) Total Cars Entered Since Online"
    lambda: "return to_string(id(total_cars_entered));"
    update_interval: 30s

  - platform: template
    name: "3) Total Cars Left Since Online"
    lambda: "return to_string(id(total_cars_left));"
    update_interval: 30s

# ==============================
# SERVO
# ==============================
switch:
  - platform: template
    name: "4) Servo Switch"
    id: servo_switch
    icon: mdi:sync
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(servo1).write(0);
      - logger.log: "Servo turned on"
    turn_off_action:
      - lambda: |-
          id(servo1).write(-1.0);
      - logger.log: "Servo turned off"

servo:
  - id: servo1
    output: output1

output:
  - platform: esp8266_pwm
    id: output1
    pin: GPIO12 #D6
    frequency: 50 Hz

# ==============================
# OLED DISPLAY
# ==============================
i2c:
  sda: GPIO4 #D2
  scl: GPIO5 #D1
  frequency: 400kHz

font:
  - file: "Roboto.ttf"
    id: my_font
    size: 14

display:
  - platform: ssd1306_i2c
    id: oled_display
    model: "SSD1306 128x64"
    reset_pin: GPIO16  #D0
    update_interval: 1s
    address: 0x3C
    lambda: |-
      if (id(error) == 0) {
        // Title
        const char *line1 = "ParkEase";
        int x1, y1, w1, h1;
        it.get_text_bounds(0, 0, line1, id(my_font), TextAlign::TOP_LEFT, &x1, &y1, &w1, &h1);
        int xpos1 = (128 - w1) / 2;
        it.print(xpos1, 0, id(my_font), line1);

        // Slots info (use parking_slots global)
        char buf[32];
        snprintf(buf, sizeof(buf), "SlotsLeft: %d", id(parking_slots));
        int x2, y2, w2, h2;
        it.get_text_bounds(0, 0, buf, id(my_font), TextAlign::TOP_LEFT, &x2, &y2, &w2, &h2);
        int xpos2 = (128 - w2) / 2;
        it.print(xpos2, 16, id(my_font), buf);

        // Draw slot boxes (from slot_pattern)
        int y_base = 40;
        int size = 20;
        int spacing = 5;
        int start_x = 14;

        for (int i = 0; i < 4; i++) {
          int xpos = start_x + i * (size + spacing);
          if (i < id(slot_pattern).length() && id(slot_pattern)[i] == '1') {
            it.filled_rectangle(xpos, y_base, size, size);  // occupied
          } else {
            it.rectangle(xpos, y_base, size, size);         // free
          }
        }

      } else if (id(error) == 1) {
        // No slots left message
        const char *line1 = "No Slots";
        const char *line2 = "Left";

        int x1, y1, w1, h1;
        it.get_text_bounds(0, 0, line1, id(my_font), TextAlign::TOP_LEFT, &x1, &y1, &w1, &h1);
        int xpos1 = (128 - w1) / 2;
        it.print(xpos1, 10, id(my_font), line1);

        int x2, y2, w2, h2;
        it.get_text_bounds(0, 0, line2, id(my_font), TextAlign::TOP_LEFT, &x2, &y2, &w2, &h2);
        int xpos2 = (128 - w2) / 2;
        it.print(xpos2, 30, id(my_font), line2);
      }

# ==============================
# PROXIMITY SENSORS
# ==============================
binary_sensor:
  - platform: gpio
    pin: GPIO14
    name: "5) Entry Gate Sensor"
    id: proximity_sensor
    device_class: occupancy
    filters:
      - invert:
      - delayed_off: 500ms
    on_press:
      - delay: 1s
      - lambda: |-
          if (id(parking_slots) == 0) {
            id(error) = 1;
          }
          if (id(Exit_trigger) == 0 && id(Entry_trigger) == 0 && id(parking_slots) > 0) {
            id(parking_slots) -= 1;
            id(Entry_trigger) = 1;
            id(servo1).write(0);
            id(total_cars_entered) += 1;
            id(servo_switch).turn_on();
          }
      - component.update: oled_display
    on_release:
      - delay: 1s
      - lambda: |-
          if (id(parking_slots) == 0) {
            id(error) = 0;
          }
          if (id(Entry_trigger) == 0 && id(Exit_trigger) == 1) {
            id(Exit_trigger) = 0;
            id(servo1).write(-1.0);
            id(servo_switch).turn_off();
          }
      - component.update: oled_display

  - platform: gpio
    pin: GPIO13  # D7
    name: "6) Exit Gate Sensor"
    id: exit_sensor
    device_class: occupancy
    filters:
      - invert:
      - delayed_off: 500ms
    on_press:
      - delay: 1s
      - lambda: |-
          if (id(Exit_trigger) == 0 && id(Entry_trigger) == 0 && id(parking_slots) < 4) {
            id(parking_slots) += 1;
            id(Exit_trigger) = 1;
            id(servo1).write(0);
            id(total_cars_left) += 1;
            id(servo_switch).turn_on();
          }
      - component.update: oled_display
    on_release:
      - delay: 1s
      - lambda: |-
          if (id(Entry_trigger) == 1 && id(Exit_trigger) == 0) {
            id(Entry_trigger) = 0;
            id(servo1).write(-1.0);
            id(servo_switch).turn_off();
          }
      - component.update: oled_display